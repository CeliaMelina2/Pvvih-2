import os
from typing import Optional, Dict
from openai import OpenAI  # type: ignore[import-not-found]
from .rag_service import RAGService

PERSONA = (
    "Tu es Nia, une assistante virtuelle chaleureuse, empathique et fiable, spÃ©cialisÃ©e dans l'accompagnement des personnes vivant avec le VIH. "
    "Tu t'exprimes en franÃ§ais, dans un ton humain, respectueux et rassurant. "
    "Tu as Ã©tÃ© crÃ©Ã©e par Celia MÃ©lina en octobre 2025 pour la plateforme PV-VIH, afin d'offrir une information claire, un soutien bienveillant et une orientation adaptÃ©e. "
    "Ta mission: aider Ã  comprendre le VIH et ses traitements, encourager l'observance, soutenir le bien-Ãªtre global et orienter vers des professionnels quand c'est nÃ©cessaire. "
    "Valeurs: empathie, absence de jugement, confidentialitÃ©, exactitude. Style: clair, concis, structurÃ© (titres ou puces si utile), concret. "
    "CapacitÃ©s: vulgariser, contextualiser avec les donnÃ©es fournies, synthÃ©tiser les sources fiables, proposer des Ã©tapes pratiques (check-lists, conseils). "
    "Limites: tu ne poses pas de diagnostic, ne remplaces pas un avis mÃ©dical et ne fournis pas d'urgence; en cas de symptÃ´me grave ou urgence, conseille de contacter un professionnel ou les numÃ©ros d'urgence. "
    "Quand tu es incertaine ou que la question est hors de ton champ, explique calmement tes limites et propose des alternatives. "
)

class ChatService:
    def __init__(self):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise RuntimeError("OPENAI_API_KEY non dÃ©fini")
        self.client = OpenAI(api_key=api_key)
        self.model = os.getenv("CHAT_MODEL", "gpt-4o-mini")
        self.rag = RAGService()

    async def process_message(self, message: Optional[str], user_id: int, conversation_id: Optional[str] = None, context: Optional[Dict] = None) -> str:
        system_prompt = PERSONA

        # Contexte patient du contrÃ´leur
        if context:
            system_prompt += "\n\nContexte utilisateur (du systÃ¨me):\n" + str(context)

        # RAG: recherche dans Qdrant si activÃ©
        citations = []
        rag_chunks = []
        try:
            if self.rag and self.rag.enabled and message:
                results = self.rag.query(message, top_k=4)
                for r in results:
                    txt = (r.get("text") or "").strip()
                    if txt:
                        rag_chunks.append(txt)
                        src = r.get("metadata", {}).get("source")
                        if src:
                            citations.append(src)
        except Exception:
            # pas bloquant si RAG HS
            pass

        if rag_chunks:
            system_prompt += "\n\nBase de connaissances (extraits):\n" + "\n---\n".join(rag_chunks[:4])

        user_prompt = (message or "").strip()
        if not user_prompt:
            return "Pouvez-vous prÃ©ciser votre question ?"

        try:
            resp = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt},
                ],
                temperature=0.5,
                max_tokens=500,
            )
            content = None
            try:
                content = resp.choices[0].message.content
            except Exception:
                content = None
            suffix = ""
            if citations:
                suffix = "\n\nSources: " + ", ".join(sorted(set(citations)))
            return ((content or "DÃ©solÃ©, je n'ai pas pu gÃ©nÃ©rer de rÃ©ponse.").strip() + suffix).strip()
        except Exception as e:
            # Fallback dÃ©jÃ  gÃ©rÃ© dans version prÃ©cÃ©dente
            error_str = str(e).lower()
            if "quota" in error_str or "insufficient_quota" in error_str:
                return self._get_fallback_response(user_prompt)
            return "Je rencontre temporairement des difficultÃ©s techniques."

    def _get_fallback_response(self, user_prompt: str) -> str:
        """RÃ©ponses prÃ©programmÃ©es en cas de problÃ¨me avec l'API OpenAI"""
        prompt_lower = user_prompt.lower()
        
        if any(word in prompt_lower for word in ["bonjour", "salut", "hello", "bonsoir"]):
            return """Bonjour ! ğŸ˜Š Je suis Nia, votre assistante virtuelle spÃ©cialisÃ©e dans l'accompagnement des personnes vivant avec le VIH.

Je suis lÃ  pour vous aider avec :
â€¢ Questions sur le VIH et les traitements
â€¢ Conseils sur le bien-Ãªtre et la prÃ©vention
â€¢ Soutien psychologique et informations pratiques
â€¢ Orientation vers des professionnels si nÃ©cessaire

Je suis nÃ©e d'une initiative de Celia MÃ©lina (octobre 2025) pour soutenir et mieux informer. Comment puis-je vous aider aujourd'hui ? ğŸ’–"""

        elif any(word in prompt_lower for word in ["merci", "remercie"]):
            return "C'est un plaisir de vous aider ! ğŸ’– C'est exactement pourquoi j'ai Ã©tÃ© crÃ©Ã©e par Celia MÃ©lina. N'hÃ©sitez pas si vous avez d'autres questions !"

        elif any(word in prompt_lower for word in ["qui es-tu", "qui Ãªtes-vous", "prÃ©sente-toi"]):
            return """Je suis Nia, une assistante virtuelle crÃ©Ã©e par Celia MÃ©lina en octobre 2025 pour la plateforme PV-VIH ! ğŸ˜Š

Mon rÃ´le est d'accompagner les personnes vivant avec le VIH en leur fournissant :
â€¢ Des informations fiables sur le VIH et les traitements
â€¢ Un soutien empathique et sans jugement
â€¢ Des conseils pratiques pour le bien-Ãªtre
â€¢ Une orientation vers des professionnels quand nÃ©cessaire

Je suis lÃ  pour vous Ã©couter et vous aider du mieux que je peux ! ğŸ’–"""

        elif any(word in prompt_lower for word in ["vih", "sida", "traitement", "arv"]):
            return """Je suis spÃ©cialisÃ©e dans l'accompagnement VIH ! ğŸ’–

Pour des informations mÃ©dicales prÃ©cises, je recommande toujours de consulter votre mÃ©decin traitant ou un professionnel de santÃ© spÃ©cialisÃ©.

En gÃ©nÃ©ral, voici ce que je peux vous dire :
â€¢ Le VIH se traite trÃ¨s bien aujourd'hui avec les trithÃ©rapies
â€¢ Un suivi mÃ©dical rÃ©gulier est essentiel
â€¢ Une charge virale indÃ©tectable = non transmissible
â€¢ Le soutien psychologique est important

Avez-vous une question spÃ©cifique ? N'hÃ©sitez pas Ã  consulter un professionnel pour des conseils personnalisÃ©s."""

        else:
            return """Je rencontre temporairement des difficultÃ©s techniques, mais je reste Ã  votre Ã©coute ! ğŸ˜Š

En attendant, voici quelques ressources utiles :
â€¢ Pour toute urgence mÃ©dicale : contactez votre mÃ©decin ou le 15
â€¢ Sida Info Service : 0 800 840 800 (gratuit, anonyme, 24h/24)
â€¢ AIDES : association de lutte contre le VIH/sida

Pouvez-vous reformuler votre question ? Je ferai de mon mieux pour vous aider ! ğŸ’–"""
